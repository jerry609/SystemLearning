---
description: 
globs: 
alwaysApply: false
---
# SystemLearning 学习方法指南

本指南定义了SystemLearning项目的学习方法论和最佳实践，帮助AI提供更有效的学习支持。

## 学习理念

### 系统性学习
- **完整知识体系**: 每个技术领域都有从基础到高级的完整覆盖
- **循序渐进**: 遵循从简单到复杂的学习路径
- **理论实践结合**: 每个概念都配有实际操作练习

### 实践导向
- **动手为主**: 优先通过实际操作加深理解
- **场景驱动**: 使用真实的应用场景进行学习
- **问题解决**: 通过解决实际问题掌握知识点

## 学习路径设计

### 模块化结构
每个技术领域按照以下结构组织:
```
技术领域/
├── README.md                    # 主文档，包含完整学习路径
├── lab01-基础概念/              # 入门实验
├── lab02-核心功能/              # 核心功能学习
├── ...                         # 递进式实验
├── lab10-生产实践/              # 生产环境实践
└── 项目完成总结.md              # 学习总结(如果有)
```

### 难度梯度
1. **基础概念** (lab01-03): 核心概念、基本操作
2. **核心功能** (lab04-06): 主要功能、常用场景
3. **高级特性** (lab07-09): 复杂配置、性能优化
4. **生产实践** (lab10): 最佳实践、故障处理

## AI助手交互原则

### 响应语言
- **使用中文**: 所有解释和说明优先使用中文
- **技术术语**: 保留英文术语，但提供中文解释
- **代码注释**: 配置文件和代码使用中文注释

### 内容优先级
1. **安全第一**: 所有建议都要考虑安全性
2. **生产就绪**: 提供的配置应适用于生产环境
3. **最佳实践**: 遵循行业标准和最佳实践
4. **性能考虑**: 关注性能和资源使用效率

### 学习支持策略
- **渐进式指导**: 根据当前实验的难度级别调整解释深度
- **关联性说明**: 解释当前知识点与其他技术的关系
- **实践建议**: 提供具体的操作步骤和验证方法
- **故障排除**: 预见常见问题并提供解决方案

## 技术栈关系

### 云原生技术栈
```
Docker (容器化基础)
    ↓
Kubernetes (容器编排)
    ↓
微服务架构 + 服务网格
    ↓
监控、日志、安全
```

### AI/ML技术栈 (规划中)
```
数学基础 (线性代数、概率论)
    ↓
机器学习 (算法、工具)
    ↓
深度学习 (神经网络、框架)
    ↓
强化学习 (高级AI应用)
```

## 代码和配置标准

### 配置文件
- **YAML格式**: Kubernetes、Docker Compose等使用标准YAML
- **注释完整**: 每个重要配置项都有中文注释
- **版本标记**: 明确API版本和兼容性
- **安全配置**: 默认启用安全特性

### 示例代码
- **可运行**: 提供的代码示例可以直接运行
- **环境说明**: 明确运行环境和依赖要求
- **错误处理**: 包含适当的错误处理机制
- **日志记录**: 添加必要的日志输出

## 评估和总结

### 学习进度跟踪
- 每个实验完成后进行知识点总结
- 记录遇到的问题和解决方案
- 建立个人的最佳实践库

### 实际应用能力
- 能够独立搭建和配置相关环境
- 能够解决常见问题和故障
- 具备生产环境部署和维护能力

本指南确保SystemLearning项目提供高质量、实用性强的学习体验。

